{"version":3,"sources":["service/index.ts","service/Service.ts","components/button/index.ts","components/button/button.tsx","components/item/index.ts","components/item/item.tsx","components/item-list/index.ts","components/item-list/ItemList.tsx","components/pagination/index.ts","components/pagination/pagination.tsx","components/posts-per-page/index.ts","components/posts-per-page/posts-per-page.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["service","_BASE_URL","getData","url","a","fetch","response","json","getPosts","getComment","id","Button","onClick","className","Item","data","useState","comments","setComments","loadingComment","setLoadingComment","showComment","setShowComment","isFavorite","setIsFavorite","classCard","cardStyle","gridRow","Math","ceil","length","undefined","listComment","map","name","body","key","style","onDoubleClick","e","title","then","ItemList","i","Pagination","nav","onClickPagination","prev_page","cur_page","pages","next_page","PostsPerPage","value","handleChange","onChange","event","target","App","posts","setPosts","useEffect","setCurPage","setNextPage","setPrevPage","postPerPage","setPostPerPage","count","navigation","cutPosts","filter","item","idx","page","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da42d868.chunk.js","sourcesContent":["import service from './Service';\r\nexport default service;","class Service {\r\n  _BASE_URL = 'https://jsonplaceholder.typicode.com/';\r\n\r\n  getData = async (url: string) => {\r\n    const response = await fetch(this._BASE_URL + url);\r\n    return await response.json();\r\n  };\r\n\r\n  getPosts = () => {\r\n    return this.getData('posts');\r\n  };\r\n\r\n  getComment = (id: number) => {\r\n    return this.getData(`comments/?postId=${id}`)\r\n  };\r\n};\r\n\r\nconst service = new Service();\r\nexport default service;","import Button from './button';\r\nexport default Button;","import React from 'react'\r\n\r\nconst Button = ({onClick, className}: ButtonProps) => {\r\n  return <button className={className} onClick={onClick}>Показать коментарий</button>\r\n}\r\n\r\nexport interface ButtonProps {\r\n  className: string,\r\n  onClick: () => void\r\n}\r\n\r\nexport default Button;\r\n","import Item from './item';\r\nexport default Item;","import React, { useState, MouseEvent } from 'react'\r\n\r\nimport service from '../../service';\r\n\r\nimport Button from '../button'\r\n\r\nimport './item.css'\r\n\r\nconst Item = ({data}: ItemProps) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [loadingComment, setLoadingComment] = useState(false);\r\n  const [showComment, setShowComment] = useState(false);\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n  const fetchComments = () => {\r\n    service.getComment(data.id)\r\n      .then(setComments)\r\n    setLoadingComment(true)\r\n  };\r\n\r\n  const switchShowComment = () => {\r\n    setShowComment(!showComment);\r\n  };\r\n\r\n  const onClickButton = () => {\r\n    if (!loadingComment) fetchComments();\r\n    switchShowComment();\r\n  };\r\n\r\n  const classCard = isFavorite ? 'card card_gold' : 'card';\r\n  const cardStyle:React.CSSProperties | undefined = showComment ?\r\n    {\r\n      gridRow: `${Math.ceil(data.id / 2)}/${comments.length}`\r\n    } : undefined;\r\n  const listComment = comments.map(({id, name, body}) => {\r\n    return (\r\n      <div key={id} className=\"card__comment comment\">\r\n        <h3 className=\"comment__title\">{id}){name}</h3>\r\n        <p className=\"comment__body\">{body}</p>\r\n      </div>\r\n    )\r\n  });\r\n\r\n  const onDbClick = (e: MouseEvent) => {    \r\n    setIsFavorite(!isFavorite);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <article style={cardStyle} onDoubleClick={onDbClick} className={classCard}>\r\n        <h3 className='card__title'>{data.id}) {data.title}</h3>\r\n        <div className='card__body'>{data.body}</div>\r\n        <Button className='card__btn' onClick={onClickButton}/>\r\n        {showComment && listComment}\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport interface dataTypes {\r\n  userId: number,\r\n  id: number,\r\n  title: string,\r\n  body: string\r\n};\r\n\r\nexport interface ItemProps {\r\n  data: dataTypes\r\n};\r\n\r\nexport default Item;\r\n","import ItemList from './ItemList';\r\nexport default ItemList;","import React from 'react';\r\n\r\nimport Item from '../item';\r\n\r\nimport './item-list.css'\r\n\r\nconst ItemList = ({data}: ListItemProps ) => {\r\n  return (\r\n    <div className='list-container'>\r\n      {\r\n        !!data && data.map((i) => {\r\n          return <Item key={i.id} data={i}/>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport interface dataTypes {\r\n  userId: number,\r\n  id: number,\r\n  title: string,\r\n  body: string\r\n};\r\n\r\nexport interface ListItemProps {\r\n  data: Array<dataTypes> | undefined\r\n};\r\n\r\nexport default ItemList;\r\n","import Pagination from './pagination';\r\nexport default Pagination;","import React from 'react'\r\n\r\nimport './pagination.css';\r\n\r\nconst Pagination = ({nav, onClickPagination}: PaginationProps) => {\r\n  return (\r\n    <div className='pagination'>\r\n      <button onClick={() => onClickPagination(nav.prev_page)}>{'< prev'}</button>\r\n      {` page ${nav.cur_page} of ${nav.pages} `}\r\n      <button onClick={() => onClickPagination(nav.next_page)}>{'next >'}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface navTypes {\r\n  prev_page: number,\r\n  cur_page: number,\r\n  next_page: number,\r\n  pages: number\r\n}\r\n\r\nexport interface PaginationProps {\r\n  nav: navTypes,\r\n  onClickPagination: (arg: number) => void\r\n};\r\n\r\nexport default Pagination;\r\n","import PostsPerPage from './posts-per-page';\r\nexport default PostsPerPage;","import React from 'react'\r\n\r\nconst PostsPerPage = ({value, handleChange}: PostsPerPageProps) => {\r\n\r\n  const handleChangeValue = (event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    handleChange(+event.target.value);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      Posts per page: \r\n      <select value={`${value}`} onChange={handleChangeValue}>\r\n        <option value=\"4\">5</option>\r\n        <option value=\"10\">10</option>\r\n        <option value=\"20\">20</option>\r\n      </select>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport interface PostsPerPageProps {\r\n  value: number,\r\n  handleChange: (value: number) => void\r\n}\r\n\r\nexport default PostsPerPage;\r\n","import React, { useState, useEffect } from 'react';\n\nimport service from '../../service';\n\nimport ItemList from '../item-list';\nimport Pagination from '../pagination';\nimport PostsPerPage from '../posts-per-page';\n\nimport './app.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    service.getPosts()\n      .then(setPosts)\n  }, []);\n  \n  const [cur_page, setCurPage] = useState(1);\n  const [next_page, setNextPage] = useState(2);\n  const [prev_page, setPrevPage] = useState(1);\n  const [postPerPage, setPostPerPage] = useState(10)\n\n  const count: number = posts.length,\n        pages: number = Math.ceil(count/postPerPage),\n        navigation = {\n          cur_page,\n          next_page,\n          prev_page,\n          pages\n        };\n\n  const onClickPagination = (page: number): void => {\n    setCurPage(page);\n    if (page - 1 !== 0) setPrevPage(page-1)\n    else setPrevPage(pages);\n    if (page !== pages) setNextPage(page + 1)\n    else setNextPage(1);\n  };\n\n  const handlePostPerPage = (value: number) => {\n    setPostPerPage(value);\n  };\n\n  const cutPosts = posts.filter((item, idx) => {\n    if (idx >= (cur_page-1) * postPerPage && idx < cur_page * postPerPage)\n    return item;\n    return false\n  });\n\n  return (\n    <main>\n      <header className='header'>\n        <h1 className='app__title'>Posts:</h1>\n        <PostsPerPage value={postPerPage} handleChange={handlePostPerPage}/>\n      </header>\n      <ItemList data={cutPosts}/>\n      <Pagination nav={navigation} onClickPagination={onClickPagination}/>\n    </main>\n  );\n};\n\nexport default App;\n","import App from './App'\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}